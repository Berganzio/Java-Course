Markov text generation

Markov text generation is a technique for generating random text based on a given input text.
Many LLM implementations use Markov text generation to generate random text based on the
training data.


The Markov text generation algorithm is as follows:

1. Split the input text into words.
2. Create a dictionary of word pairs, where each word pair is a key and the value is a list of
   words that follow the word pair in the input text.
3. Choose a random word pair from the dictionary as a starting point.
4. Choose a random word from the list of words that follow the word pair.
5. Repeat steps 3 and 4 until the desired number of words is generated.

Every Markov model is trained on a set of words. The training set is a list of words that
can vary from a conversation to a book etc.. The training set is used to create a dictionary
of word pairs. The dictionary is a list of words that follow a word pair. The word pair is
a key and the list of words that follow the word pair is the value. The dictionary is used
to generate random text. The random text is generated by choosing a random word pair from the
dictionary and then choosing a random word from the list of words that follow the word pair.

Markov models are categorized by orders. The order of a Markov model is the number of words or characters
that are used to generate the next word or character. For example, a Markov model with an order of 1
uses a single character or word to generate the next character or word. A Markov model with an order of 2
uses two characters or words to generate the next character and so on.

Example of a Markov model with an order of 1 for all the characters that comes after the letter "t":

sentence:        t h i s   i s   a n     a  t  t  e  m  p  t
index:           0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17

1. "follows" list is initially empty
2. find first occurrence of "t" starting at index 0
3. add letter at index 1 to "follows" list
4. find next occurrence of "t" starting at index 1
5. add letter at index 13 to "follows" list
6. find next occurrence of "t" starting at index 13
7. add letter at index 14 to "follows" list
8. find next occurrence of "t" starting at index 14

